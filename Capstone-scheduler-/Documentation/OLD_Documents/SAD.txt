
Software Architecture Document

Version X.X

for

Concordia Capstone Scheduler

Prepared by

<name>	<student-id>	<email>
		

Instructor:	<name>
Course:	< name>
Date:	<date of submission>


 
Document history
Date	Version	Description	Author
			
			
			
			

 

Table of contents
1.	Introduction	5
Purpose	5
Scope	5
Definitions, acronyms, and abbreviations	5
2.	Architectural representation	6
7.	Architectural requirements: goals and constrains	8
Functional requirements (Use case view)	8
Non-functional requirements	8
8.	Use case view (Scenarios)	11
9.	Logical view	12
Layers, tiers etc.	12
Subsystems	12
Use case realizations	12
10.	Development (Implementation) view	13
Reuse of components and frameworks	13
11.	Process view	14
12.	Deployment (Physical) view	15
13.	Data view (optional)	16
14.	Size and performance	17
15.	Quality	17

 
List of figures
Figure 1: The 4+1 view model.	6
 
1.	Introduction

Purpose
	The purpose of the Software Architecture Document (SAD) is to describe the system in terms of its high-level design (the system’s architecture), as well as its low-level design. Firstly, the document will provide an overview on the architecture of the system. It will proceed to present architectural representations of the system through different architectural views. The document will then make reference to architecturally relevant functional and nonfunctional requirements, and will finally address size, performance, and quality attributes of the system. The document is intended for all team members as well as the clients of the product, as the different architectural views provide a different abstraction of the system that is intended for different stakeholders. 

Scope
	This document applies to the software architecture of the system. As such, it details the high-level and low-level design of the system. This has a direct affect on the implementation of the system, as the implementation will be modeled by the system’s architecture. Designers and implementers of the system will make reference to the architectural overview presented in this document when making design decisions during the development of this product.  
	
Definitions, acronyms, and abbreviations
Provides the definitions of all terms, acronyms, and abbreviations required to properly interpret the Software Architecture Document.  This information may be provided by reference to the project’s Glossary. For example:

RUP: Rational Unified Process
UML: Unified Modeling Language
SAD: Software Architecture Document

 
2.	Architectural representation 

Describe the top-level architectural style of the system and the view model you will adopt. Additionally describe what each individual view will provide. Many enterprise software systems are modeled using the 4+1 view illustrated in Figure 1.


 
Figure 1: The 4+1 view model.

1.	Logical view : Audience: Designers. The logical view is concerned with the functionality that the system provides to end-users. UML Diagrams used to represent the logical view include Class diagram, and interaction diagrams (communication diagrams, or sequence diagrams). 

2.	Development view  (also known as Implementaion view): Audience: Programmers. The development view illustrates a system from a programmer's perspective and is concerned with software management. This view is also known as the implementation view. It uses the UML Component diagram to describe system components. UML Diagrams used to represent the development view include the Package diagram.


3.	Process view : Audience: Integrators. The process view deals with the dynamic aspects of the system, explains the system processes and how they communicate, and focuses on the runtime behavior of the system. The process view addresses concurrency, distribution, integrators, performance, and scalability, etc. UML Diagrams to represent process view include the Activity diagram.

4.	Physical view (also known as deployment view) : Audience: Deployment managers. The physical view depicts the system from a system engineer's point of view. It is concerned with the topology of software components on the physical layer, as well as the physical connections between these components. UML Diagrams used to represent physical view include the Deployment diagram.

5.	Use case view (also known as Scenarios) : Audience: all the stakeholders of the system, including the end-users. The description of an architecture is illustrated using a small set of use cases, or scenarios which become a fifth view. The scenarios describe sequences of interactions between objects, and between processes. They are used to identify architectural elements and to illustrate and validate the architecture design. They also serve as a starting point for tests of an architecture prototype.  Related Artifacts : Use-Case Model.

6.	Data view (optional):  Audience: Data specialists, Database administrators. Describes the architecturally significant persistent elements in the data model . Related Artifacts: Data model. 
7.	Architectural requirements: goals and constrains
Requirements are already described in SRS. In this section describe key requirements and constraints that have a significant impact on the architecture.

Functional requirements (Use case view)



UC1
Make Reservation
Requires us to interactive with database and verify other reservations; this was the bulk of business logic complexity, designed around this use case. 
Sequence Diagram 2
UC2
View Reservation
Needs to be updated often in the front end; forced us to implement some form of an observer
Sequence Diagram 1 

UC3,UC4
Modify Reservation
Cancel Reservation
Given that we may be modifying and cancelling often we implemented a unit of work to reduce load on the database. 
Sequence Diagram 3,
Sequence Diagram 4 


Non-functional requirements
Accessibility
Only ENCS registered students in the database should have access to the web application. 
Usability
90% of users will be able to perform all major activities provided by the system in less than 3 minutes.
Portability
The web application should function on all major web browsers and operating systems.
Maintainability
This system is expected to be modified in the future therefore the less coupling and most cohesion as possible is requirment

Non functional table


SRS
Accessibility
Login and logout functionality has to access database of registered students
Logical View 
SRS
Usablity
Made a Calender UI that marked which timeslots were taken, this visual value makes system easier to use 
Logical View
SRS
Portability
Used standard libraries, web standards and popular frameworks to ensure compatibility on all major operating systems, web browsers.
Physical View
SRS
Maintainability
Separation of concerns among classes, allows for changes to be modular
Logical View




Source	Name	Architectural relevance	Addressed in:
e.g. Vision, SRS.	Name of requirement.	Description on why this requirement is relevant to the software architecture.	Section number where this requirement is addressed in this document.

 
8.	Use case view (Scenarios)

The scenarios (or functional view) represent the behavior of the system as seen by its actors. Use case scenarios describe sequences of interactions between actorsd and the system (seen as a black box) as well as between the system and external systemsTthe UML use case diagram is used to capture this view.


 
9.	Logical view

The logical view captures the functionality provided by the system; it illustrates the collaborations between system components in order to realize the system's use cases. Describe the architecturally significant logical structure of the system. Think of decomposition in tiers and subsystem. Also describe the way in which, in view of the decomposition, Use Cases are technically translated into Use Case Realizations.

Layers, tiers etc.
Layered Architecture Class Diagram
(Insert)

Subsystems
	The web application can be divided into two discrete subsystems: the client and the server. The client handles the presentation layer of the system, which is the only portion of the overall system that is visible to the user. This includes the Graphical User Interface, and also handles all user actions and requests. If the client receives a request from a user, it is then processed and sent to the next subsystem: the server, which contains the domain and data source layer of the system. The server handles the core business logic of the application and also contains the relational database, which contains tables to store domain object information in order to develop persistence in the overall system. These two subsystems interact with each other (the client sends a request to the server upon user input, the server then processes the action and sends a response), to form the overall system. 

Architecturally significant design packages
Desribe packages of individual subsystems that are architecturally significant. For each package nclude a subsection with its name, its brief description, and a diagram with all significant classes and packages contained within the package.

Use case realizations
In this section you have to illustrate how use cases are translated into UML interaction diagrams. Give examples of the way in which the Use Case Specifications are technically translated into Use Case Realizations, for example, by providing a sequence-diagram. Explain how the tiers communicate and clarify how the components or objects used realize the functionality.



Framework and technological re-use
The web framework which was used in the implementation of this application was Django. Django is a python based web framework. Due to requirements in the project outline, we were restricted from incorporating certain functionalities of the framework, as certain limitations were imposed. In addition to this, Node.js, a run-time environment for JavaScript, was used to assist with front-end development. 




14.	Size and performance
Describe how the architecture supports the key sizing and performance requirements, as described in the Supplementary Specification. For example:

Volumes:
•	Estimated ENCS Capstone students : 400 students
•	Number of Capstone rooms: 15
•	Total number of Capstone room timeslots: 60

Performance:
•	Time for a user to login: less than 5 seconds
•	Time for the system to perform operations on the schedule (add, cancel, modify): less than 8 seconds

15.	Quality 
A description of how the software architecture contributes to the quality attributes of the system as described in the ISO-9126 (I) standard. For example: The following quality goals have been identified:

Scalability: 
•	Description : System’s reaction when user demands increase
•	Solution : J2EE application servers support several workload management techniques
Reliability, Availability: 
•	Description : Transparent failover mechanism, mean-time-between-failure
•	Solution : : J2EE application server supports load balancing through clusters
Portability: 
•	Description : Ability to be reused in another environment
•	Solution : The system me be fully J2EE compliant and thus can be deploy onto any J2EE application server
Security: 
•	Description : Authentication and authorization mechanisms
•	Solution : J2EE native security mechanisms will be reused

